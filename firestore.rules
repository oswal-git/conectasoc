// firebase rules_version

rules_version = '2';

service cloud.firestore {
match /databases/{database}/documents {
    
    // Helper function: verificar si el usuario está autenticado
    function isSignedIn() {
      return request.auth != null;
    }
    
    // Helper function: obtener datos del usuario
    function getUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }
    
    // Helper function: verificar si es superadmin
    function isSuperAdmin() {
      return isSignedIn() && 
             'memberships' in getUserData() && // Asegurarse de que el campo exista
             // Comprobación directa y eficiente del rol de superadmin en una asociación específica.
             getUserData().memberships.get('superadmin_access', '') == 'superadmin';
    }
    
    // Helper function: verificar si es admin de la asociación
    function isAdmin(associationId) {
      return isSignedIn() && 
             'memberships' in getUserData() && // Asegurarse de que el campo exista
             getUserData().memberships[associationId] == 'admin'; // Acceso directo por clave
    }  

    // Helper function: verificar si es editor
    function isEditor(associationId) {
      return isSignedIn() && 
             'memberships' in getUserData() && // Asegurarse de que el campo exista
             getUserData().memberships[associationId] == 'editor'; // Acceso directo por clave
    }

    // =========================================
    // COLECCIÓN: users
    // =========================================
    match /users/{userId} {
      
      // NUEVA REGLA: Permite a CUALQUIER usuario (autenticado o no)
      // realizar consultas sobre la colección. Esencial para "isFirstUser".
      // NO permite leer el contenido de los documentos.
      allow list: if true;
      
      // Crear: cualquier usuario autenticado puede crear su propio documento
      allow create: if isSignedIn() && request.auth.uid == userId;
      
      // Leer: El propio usuario, un superadmin, o un admin de una de las asociaciones del usuario.
      allow read: if isSignedIn() && (
        request.auth.uid == userId ||
        isSuperAdmin() ||
        resource.data.memberships.keys().exists(assocId == isAdmin(assocId))
      );
      
      // Actualizar:
      // 1. El propio usuario puede actualizar sus datos de perfil, pero no sus roles ni estado.
      // 2. Un superadmin puede actualizar cualquier cosa.
      // 3. Un admin puede actualizar usuarios de su asociación, pero no puede crear superadmins.
      allow update: if isSignedIn() && (
        (request.auth.uid == userId && 
         request.resource.data.keys().hasOnly(['firstName', 'lastName', 'phone', 'language', 'avatarUrl', 'dateUpdated'])) ||
        isSuperAdmin() ||
        (
          resource.data.memberships.keys().exists(assocId == isAdmin(assocId)) &&
          // Un admin no puede crear un superadmin
          !('superadmin' in request.resource.data.memberships.values())
        )
      );
      
      // Eliminar: solo un superadmin puede borrar usuarios.
      // NOTA: Esto no borra el usuario de Firebase Auth, solo de Firestore.
      // La lógica de borrado completo debe manejarse en una Cloud Function.
      allow delete: if isSuperAdmin();
    }
    
    // =========================================
    // COLECCIÓN: associations
    // =========================================
    // Asociaciones:
    // Lectura pública para que los nuevos usuarios puedan ver la lista.
    match /associations/{associationId} {
      // Leer y Listar: Cualquiera puede ver la lista de asociaciones para registrarse.
      allow read, list: if true;
      
      // Crear: solo un usuario autenticado que se establece a sí mismo como creador.
      // Esto asegura que solo se puedan crear asociaciones durante el proceso de registro.
      allow create: if isSignedIn() && (request.resource.data.creatorId == request.auth.uid || isSuperAdmin());

      // Actualizar: superadmin o admin de esa asociación
      allow update: if (isSuperAdmin() || isAdmin(associationId))

      // Eliminar: solo superadmin
      allow delete: if isSuperAdmin();
    }

    // =========================================
    // COLECCIÓN: articles
    // =========================================
    match /articles/{articleId} {
      // Leer: usuarios autenticados pueden leer artículos publicados
      // o artículos de su asociación (sin importar estado)
      allow read: if isSignedIn();
      
      // Crear: superadmin, admin, o editor
      allow create: if isSignedIn() && (
        isSuperAdmin() ||
        'admin' in getUserData().memberships.values() ||
        'editor' in getUserData().memberships.values()
      );
      
      // Actualizar: superadmin, admin de la asociación, o el autor
      allow update: if isSignedIn() && (
        isSuperAdmin() ||
        isAdmin(resource.data.associationId) ||
        request.auth.uid == resource.data.authorId
      );
      
      // Eliminar: superadmin o admin de la asociación
      allow delete: if isSuperAdmin() || isAdmin(resource.data.associationId);
    }
    
    // =========================================
    // COLECCIÓN: categories & subcategories
    // =========================================
    match /categories/{categoryId} {
      // Cualquiera puede leer las categorías para los filtros.
      allow read, list: if true;
      // Solo los superadmins pueden crear, modificar o borrar categorías.
      allow write: if isSuperAdmin();
    }

    match /subcategories/{subcategoryId} {
      // Cualquiera puede leer las subcategorías para los filtros.
      allow read, list: if true;
      // Solo los superadmins pueden crear, modificar o borrar subcategorías.
      allow write: if isSuperAdmin();
    }

    // =========================================
    // COLECCIÓN: articles
    // =========================================
    match /articles/{articleId} {
      // Función para verificar si un artículo es genérico (sin asociación)
      function isGenericArticle() {
        return resource.data.assocId == null || resource.data.assocId == '';
      }

      // Función para verificar si el usuario pertenece a la asociación del artículo
      function isMemberOfArticleAssociation() {
        return isSignedIn() &&
               'memberships' in getUserData() &&
               resource.data.assocId in getUserData().memberships;
      }

      // Leer:
      // 1. Superadmins pueden leer todo.
      // 2. Usuarios autenticados pueden leer artículos genéricos.
      // 3. Usuarios autenticados pueden leer artículos de sus asociaciones.
      allow read, list: if isSuperAdmin() || (isSignedIn() && (isGenericArticle() || isMemberOfArticleAssociation()));

      // Crear:
      // El usuario debe ser superadmin, admin o editor de la asociación que se está asignando.
      allow create: if isSignedIn() && (
        isSuperAdmin() ||
        isAdmin(request.resource.data.assocId) ||
        isEditor(request.resource.data.assocId)
      );

      // Actualizar:
      // 1. Superadmin puede actualizar todo.
      // 2. Admin puede actualizar artículos de su asociación.
      // 3. Editor puede actualizar artículos de su asociación SI es el autor.
      allow update: if isSignedIn() && (
        isSuperAdmin() || // Superadmin
        isAdmin(resource.data.assocId) ||
        (isEditor(resource.data.assocId) && request.auth.uid == resource.data.userId)
      );

      // Eliminar:
      // Superadmin o admin de la asociación del artículo.
      allow delete: if isSignedIn() && (
        isSuperAdmin() ||
        isAdmin(resource.data.assocId)
      );
    }

    // =========================================
    // COLECCIÓN: itemArticles
    // =========================================
    match /itemArticles/{itemId} {
      allow read: if isSignedIn();
      allow write: if isSignedIn() && (
        isSuperAdmin() ||
        'admin' in getUserData().memberships.values() ||
        'editor' in getUserData().memberships.values()
      );
    }
    
    // =========================================
    // COLECCIÓN: images
    // =========================================
    match /images/{imageId} {
      allow read: if isSignedIn();
      allow write: if isSignedIn() && (
        isSuperAdmin() ||
        'admin' in getUserData().memberships.values() ||
        'editor' in getUserData().memberships.values()
      );
    }
    
    // =========================================
    // COLECCIÓN: notifications
    // =========================================
    match /notifications/{notificationId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() && (
        isSuperAdmin() ||
        'admin' in getUserData().memberships.values() ||
        'editor' in getUserData().memberships.values()
      );
      allow update: if isSuperAdmin();
      allow delete: if isSuperAdmin();
    }
    
    // =========================================
    // COLECCIÓN: notificationUsers
    // =========================================
    match /notificationUsers/{notificationUserId} {
      // Leer: el propio usuario o superadmin
      allow read: if isSignedIn() && (
        resource.data.userId == request.auth.uid ||
        isSuperAdmin()
      );
      
      // Crear: sistema (notificaciones automáticas)
      allow create: if isSignedIn();
      
      // Actualizar: el propio usuario (marcar como leída)
      allow update: if isSignedIn() && resource.data.userId == request.auth.uid;
      
      // Eliminar: solo superadmin
      allow delete: if isSuperAdmin();
    }
  }
}
