// firebase rules_version

rules_version = '2';

service cloud.firestore {
match /databases/{database}/documents {
    
    // Helper function: verificar si el usuario está autenticado
    function isSignedIn() {
      return request.auth != null;
    }
    
    // Helper function: obtener datos del usuario
    function getUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }
    
    // Helper function: verificar si es superadmin
    function isSuperAdmin() {
      return isSignedIn() && 
             'memberships' in getUserData() && // Asegurarse de que el campo exista
             'superadmin' in getUserData().memberships.values(); // Comprobar si algún rol es 'superadmin'
    }
    
    // Helper function: verificar si es admin de la asociación
    function isAdmin(associationId) {
      return isSignedIn() && 
             'memberships' in getUserData() && // Asegurarse de que el campo exista
             getUserData().memberships[associationId] == 'admin'; // Acceso directo por clave
    }  

    // Helper function: verificar si es editor
    function isEditor(associationId) {
      return isSignedIn() && 
             'memberships' in getUserData() && // Asegurarse de que el campo exista
             getUserData().memberships[associationId] == 'editor'; // Acceso directo por clave
    }

    // =========================================
    // COLECCIÓN: users
    // =========================================
    match /users/{userId} {
      
      // NUEVA REGLA: Permite a CUALQUIER usuario (autenticado o no)
      // realizar consultas sobre la colección. Esencial para "isFirstUser".
      // NO permite leer el contenido de los documentos.
      allow list: if true;

      // Leer: el propio usuario, superadmin, o admin de su asociación
      // Esta regla se mantiene para proteger los datos de cada usuario.
      // Se permite la lectura a superadmins para poder realizar la comprobación de borrado.
      allow read: if isSuperAdmin() || (isSignedIn() && request.auth.uid == userId);
      
      // Crear: cualquier usuario autenticado puede crear su propio documento
      allow create: if isSignedIn() && request.auth.uid == userId;
      
      // Actualizar: el propio usuario, superadmin, o admin de su asociación
      allow update: if isSignedIn() && ( // 'resource' se refiere al documento ANTES del cambio
        request.auth.uid == userId ||
        isSuperAdmin() ||
        (getUserData().memberships.keys().exists(assocId, getUserData().memberships[assocId] == 'admin' && assocId in resource.data.memberships))
      );
      
      // Eliminar: solo superadmin o admin de la asociación
      allow delete: if isSuperAdmin() || (getUserData().memberships.keys().exists(assocId, getUserData().memberships[assocId] == 'admin' && assocId in resource.data.memberships));
    }
    
    // =========================================
    // COLECCIÓN: associations
    // =========================================
    // Asociaciones:
    // Lectura pública para que los nuevos usuarios puedan ver la lista.
    match /associations/{associationId} {
      // Leer y Listar: Cualquiera puede ver la lista de asociaciones para registrarse.
      allow read, list: if true;
      
      // Crear: solo un usuario autenticado que se establece a sí mismo como creador.
      // Esto asegura que solo se puedan crear asociaciones durante el proceso de registro.
      allow create: if isSignedIn() && (request.resource.data.creatorId == request.auth.uid || isSuperAdmin());
      
      // Actualizar: superadmin o admin de esa asociación
      allow update: if isSuperAdmin() || isAdmin(associationId);
      
      // Eliminar: solo superadmin
      allow delete: if isSuperAdmin();
    }

    // =========================================
    // COLECCIÓN: articles
    // =========================================
    match /articles/{articleId} {
      // Leer: usuarios autenticados pueden leer artículos publicados
      // o artículos de su asociación (sin importar estado)
      allow read: if isSignedIn();
      
      // Crear: superadmin, admin, o editor
      allow create: if isSignedIn() && (
        isSuperAdmin() ||
        'admin' in getUserData().memberships.values() ||
        'editor' in getUserData().memberships.values()
      );
      
      // Actualizar: superadmin, admin de la asociación, o el autor
      allow update: if isSignedIn() && (
        isSuperAdmin() ||
        isAdmin(resource.data.associationId) ||
        request.auth.uid == resource.data.authorId
      );
      
      // Eliminar: superadmin o admin de la asociación
      allow delete: if isSuperAdmin() || isAdmin(resource.data.associationId);
    }
    
    // =========================================
    // COLECCIÓN: itemArticles
    // =========================================
    match /itemArticles/{itemId} {
      allow read: if isSignedIn();
      allow write: if isSignedIn() && (
        isSuperAdmin() ||
        'admin' in getUserData().memberships.values() ||
        'editor' in getUserData().memberships.values()
      );
    }
    
    // =========================================
    // COLECCIÓN: images
    // =========================================
    match /images/{imageId} {
      allow read: if isSignedIn();
      allow write: if isSignedIn() && (
        isSuperAdmin() ||
        'admin' in getUserData().memberships.values() ||
        'editor' in getUserData().memberships.values()
      );
    }
    
    // =========================================
    // COLECCIÓN: notifications
    // =========================================
    match /notifications/{notificationId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() && (
        isSuperAdmin() ||
        'admin' in getUserData().memberships.values() ||
        'editor' in getUserData().memberships.values()
      );
      allow update: if isSuperAdmin();
      allow delete: if isSuperAdmin();
    }
    
    // =========================================
    // COLECCIÓN: notificationUsers
    // =========================================
    match /notificationUsers/{notificationUserId} {
      // Leer: el propio usuario o superadmin
      allow read: if isSignedIn() && (
        resource.data.userId == request.auth.uid ||
        isSuperAdmin()
      );
      
      // Crear: sistema (notificaciones automáticas)
      allow create: if isSignedIn();
      
      // Actualizar: el propio usuario (marcar como leída)
      allow update: if isSignedIn() && resource.data.userId == request.auth.uid;
      
      // Eliminar: solo superadmin
      allow delete: if isSuperAdmin();
    }
  }
}
